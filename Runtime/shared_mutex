//==============
// shared_mutex
//==============

#pragma once


//=======
// Using
//=======

#include "Concurrency/SharedLock.h"
#include "mutex"


//===========
// Namespace
//===========

namespace std {


//==============
// Shared-Mutex
//==============

class shared_mutex: private Concurrency::SharedMutex
{
public:
	// Friends
	template <class _mutex_t> friend class shared_lock;
	template <class _mutex_t> friend class unique_lock;

	// Con-/Destructors
	inline shared_mutex() {}

	// Common
	inline void lock() { Lock(); }
	inline void lock_shared() { LockShared(); }
	inline void unlock() { Unlock(); }
	inline void unlock_shared() { UnlockShared(); }
};


//=============
// Shared-Lock
//=============

template <class _mutex_t> class shared_lock: private Concurrency::SharedLock
{
public:
	// Con-/Destructors
	inline shared_lock(_mutex_t& mutex): SharedLock(mutex) {}

	// Common
	inline void lock() { Lock(); }
	inline void release() { Release(); }
	inline void unlock() { Unlock(); }
};

}
