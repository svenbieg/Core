//====================
// condition_variable
//====================

#pragma once


//=======
// Using
//=======

#include <chrono>
#include "Concurrency/Signal.h"
#include "mutex"


//===========
// Namespace
//===========

namespace std {


//========
// Status
//========

enum class cv_status
{
no_timeout,
timeout
};


//====================
// Condition-Variable
//====================

class condition_variable: private Concurrency::Signal
{
public:
	// Con-/Destructors
	condition_variable();

	// Common
	inline void notify_all() { Broadcast(); }
	inline void wait(unique_lock<mutex>& lock) { Wait(lock); }
	inline cv_status wait_for(unique_lock<mutex>& lock, chrono::duration<UINT> time_out)
		{
		return Wait(lock, time_out.value)? cv_status::no_timeout: cv_status::timeout;
		}
};

}
